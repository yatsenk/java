package Java2L1;

import Java2L1.V1.*;
import Java2L1.V2.*;
import Java2L1.V2.Interfaces.*;
import Java2L1.V3.*;

import java.util.ArrayList;

public class Main {

    public static void main(String[] args) {


//        2. Добавить класс Team, который будет содержать название команды, массив из 4-х участников (т.е. в конструкторе можно сразу всех участников указывать), метод для вывода информации о членах команды, прошедших дистанцию, метод вывода информации обо всех членах команды.
//        3. Добавить класс Course (полоса препятствий), в котором будут находиться массив препятствий, метод, который будет просить команду пройти всю полосу.

        System.out.println("Задание версия 1");
        Team t = new Team("Ivan", "Stas", "Boris", "Vlad");
        Course c = new Course(10, 20, 30); // сложность каждого препятствия в процентах

        c.doIt(t);
        t.showResulta();


//        1. Создайте три класса Человек, Кот, Робот, которые не наследуются от одного класса. Эти классы должны уметь бегать и прыгать (методы просто выводят информацию о действии в консоль).
//        2. Создайте два класса: беговая дорожка и стена, при прохождении через которые, участники должны выполнять соответствующие действия (бежать или прыгать), результат выполнения печатаем в консоль (успешно пробежал, не смог пробежать и т.д.). У препятствий есть длина (для дорожки) или высота (для стены), а ​участников​ ограничения на бег и прыжки.
//        3. Создайте два массива​: с участниками и препятствиями, и заставьте всех участников пройти этот набор препятствий. Если участник не смог пройти одно из препятствий, то дальше по списку он препятствий не идет.


        // НЕ наследовать - НЕ удобно. Может быть, надо наследовать, и это такая же ошибка в задании,
        // как и презентация и прошлая версия методички, по которой я уже сделал задание выше?
        // Это дико неудобно и порождает кучу копипасты.
        System.out.println();
        System.out.println("Задание версия 2");

        ArrayList<TeamMembers> team = new ArrayList<>(3);
        team.add(new Man("Vasya"));
        team.add(new Cat("Boris",150,4));
        team.add(new Robot("HAL",10,10));

        ArrayList<Problems> training = new ArrayList<>(2);
        training.add(new Wall(3));
        training.add(new TreadMill());

        for (Problems tr:training) {
            for(TeamMembers te: team)
            tr.solve(te);
        }


        // Задание мы выполнили, давайте сделаем нормально.
        // Так как мне непонятно, зачем нам отдельные классы препятствий без методов (просто хранить переменные?),
        // то взаимодействие оставим по-прежнему странным:
        // препятствия испытывают участников, а не участники берут препятствия.

        System.out.println();
        System.out.println("Задание версия 2 улучшенная.");

        ArrayList<StarTeam> star = new ArrayList<>(3);
        star.add(new StarTeamMan("Thor",200000,101));
        star.add(new StarTeamCat("Behemoth",400000,50));
        star.add(new StarTeamRobot("HAL 9000",50000,500));

        ArrayList<Hell> h = new ArrayList<>(2);
        h.add(new HellRun());
        h.add(new HellWall());

        for(Hell shine : h){
            for(StarTeam s : star)
                shine.solve(s);
        }
    }
}
